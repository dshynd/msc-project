type WorkData is struct(integer id; real[] array) 
type WorkResult is struct(integer id; real value) 

type IAveragerCollated is interface(out WorkData output)
type IWorker is interface(in WorkData input ; out WorkResult output)
type ICollator is interface(in WorkResult input)

proc printArray(real[] a){
	printString("\n[")
	
	for i = 0 .. a.length-1 do {
		printReal(a[i])
		printString(" ")
	}
	
	printString("]\n")
}

proc initArray(real[] a){
	for i = 0 .. a.length-1 do {
		a[i] := randReal()
	}
}

component Worker presents IWorker{

	loops = 1

    proc doAveraging(WorkData data) : real {
    	id = data.id
    
    	newValue = 0.0
	    for i = 0 .. loops-1 do {
			if id == 0 then{
				newValue := (data.array[0] + data.array[id+1]) / 2;
			}
			else{
				if id == data.array.length-1 then{
					newValue := (data.array[id-1] + data.array[id]) / 2;	
				}
				else{
					newValue := (data.array[id-1] + data.array[id] + data.array[id+1]) / 3; 
				}
			}
			
			data.array[id] := newValue;
	    } 

	    return data.array[id]
    }


	constructor(){
	}
	
	behaviour{
		receive data from input
		finalValue = doAveraging(data)
		result = new WorkResult(data.id, finalValue)		
		send result on output
		stop
	}
} 

component Collator presents ICollator{

	res = new real[4] of 0.0
    count = 0
	
	constructor(){
	}
	
	behaviour{
		receive result from input
		res[result.id] := result.value
		count := count + 1
		if count == res.length then {
		   stop
		}
	}
}

component AveragerCollated presents IAveragerCollated {
	
	a = new real[4] of 0.0
	
	collator = new Collator()
	
	proc sendDataToWorker(integer id){
		worker = new Worker()
	    data = new WorkData(id, a)
	    connect output to worker.input
	    connect worker.output to collator.input
	    send data on output
	    disconnect output
	}
	
	constructor() {
	}
	
	behaviour {
		initArray(a)
		for i = 0 .. a.length-1 do {
		    sendDataToWorker(i)
		}
		stop
	}
}

ac = new AveragerCollated()